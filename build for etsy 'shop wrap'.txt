
index : etsy

For more information about this repository, visit the project page at http://drupal.org/project/etsy
Drupal Git User (LDAP)
summaryrefslogtreecommitdiffstats


path: root/etsy.module
blob: 7cf034197bd43149f5280ffe811d9b4fd84c3d26 (plain)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
<?php
/**
 * @file
 * This is the Etsy API module
 *
 * The Etsy Shop API module provides a wrapper for Etsy.com's API. You can 
 * use this to create a Drupal front-end to your Etsy shop, or simply create 
 * blocks showing some items from your shop's listings.
 *
 * Use of this module requires an API key from etsy.com/developers.
 */


/**
 * Implementation of hook_rest_api_schemas().
 */
function custom_rest_api_schemas() {
  $schemas = array();

  $schemas['etsy'] = new stdClass();
  $schemas['etsy']->class = 'etsy_api_query';
  $schemas['etsy']->file = 'includes/classes.inc';
  $schemas['etsy']->module = 'etsy';
  $schemas['etsy']->types = array(
    'listing' => 'listings',
    'user' => 'users',
    'shop' => 'shops',
  );

  return $schemas;
}

function etsy_handle_api_function() {
  return rest_api_query_handle_api_function('etsy')->execute()->result;
}

function etsy_listings($parameters) {
  return etsy_handle_api_function();
}
function etsy_users($parameters) {
  return etsy_handle_api_function();
}
function etsy_shops($parameters) {
  return etsy_handle_api_function();
}

/**
 * Implementation of hook_menu().
 */
function etsy_menu() {
  $items = array();

  $items['admin/settings/etsy'] = array(
    'title' => 'Etsy Shop',
    'description' => 'Administrative settings for Etsy Shop API module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('etsy_settings_form'),
    'access arguments' => array('administer etsy'),
  );
  
  $items['etsy_test'] = array(
    'title' => 'Menu item',
    'description' => 'The description of the menu item. It is used as title attribute and on the administration overview page.',
    'page callback' => 'etsy_test',
    'access arguments' => array('administer etsy'),
  );

  return $items;
}

function etsy_test() {
  return print_r(etsy_listings(), true);

}

function etsy_settings_form() {

  $form['etsy_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Your Etsy username'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('etsy_username', ''),
  );
  
  $form['etsy_keystring'] = array(
    '#type' => 'textfield',
    '#title' => t('Keystring'),
    '#description' => t('The keystring provided to you by Etsy (!dev_url)', array('!dev_url' => l('etsy.com/developers/your-apps', 'https://www.etsy.com/developers/your-apps'))),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('etsy_keystring', ''),
  );
  
  $form['etsy_shared_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Shared Secret'),
    '#description' => t('The shared secret provided to you by Etsy (!dev_url)', array('!dev_url' => l('etsy.com/developers/your-apps', 'https://www.etsy.com/developers/your-apps'))),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('etsy_shared_secret', ''),
  );
  
  $form['etsy_api'] = array(
    '#type' => 'select',
    '#title' => t('Etsy API'),
    '#multiple' => FALSE,
    '#description' => t('The Etsy API version to use.'),
    '#options' => array(0 => 'Sandbox', 1 => 'Production'),
    '#default_value' => variable_get('etsy_api', 0),
  );
  
  return system_settings_form($form);
}

/**
 * Get the entrypoint to the Etsy web service.
 *
 * Etsy provides production and sandbox versions for their API. This function
 * returns the endpoint for the version specified at /admin/settings/etsy
 *
 * @param $version
 *   0 for the sandbox, 1 for production
 *
 * @return
 *   A string with the URL of the entrypoint. If the $version parameter is
 *   invalid, it will be logged and the sandbox entrypoint will be returned.
 */
function _etsy_entrypoint($version) {
  switch($version) {
    case 0:
      return 'http://sandbox.openapi.etsy.com/v2';
      break;
    
    case 1:
      return 'http://openapi.etsy.com/v2';
      break;
      
    default:
      watchdog('etsy', t('Etsy entrypoint version could not be determined. Falling back to sandbox version.'), NULL, WATCHDOG_WARNING);
      return 'http://sandbox.openapi.etsy.com/v2';
  }
  
}

/**
 * Make a call to Etsy's web service.
 *
 * @param $object
 * @param $method
 * @param $parameters
 *
 * @return
 */
function _etsy_service_call($object, $method, $parameters = array()) {

/*
  GET methods
  getShop /shops/:shop_id
  findAllUserShops /users/:user_id/shops

*/
}

generated by cgit v0.12 at 2016-05-12 12:27:03 (GMT)
